<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <FaultRules>
    	<FaultRule name="InvalidAccessToken">
	 <Condition>(fault.name = "invalid_access_token") or (fault.name = "InvalidAccessToken")</Condition>
	 <Step>
	 	<Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
	 </Step>
	 <Step>
		<Name>Fault.401InvalidToken</Name>
	 </Step>
</FaultRule>

<FaultRule name="AccessTokenExpired">	
	<Condition>(fault.name = "access_token_expired") or (fault.string = "Access Token expired")</Condition>
	<Step>
		<Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
	</Step>
	<Step>
		<Name>Fault.401InvalidToken</Name>
	</Step>
</FaultRule>

 
        <FaultRule name="QuotaViolation">
   <Condition>(fault.name = "QuotaViolation") </Condition>
   <Step>
      <Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
   </Step>
   <Step>
      <Name>Fault.500RatelimitQuotaViolation</Name>
   </Step>
</FaultRule>




        <FaultRule name="SpikeArrestViolation">
   <Condition>(fault.name = "SpikeArrestViolation") </Condition>
   <Step>
      <Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
   </Step>
   <Step>
      <Name>Fault.500RatelimitSpikeArrestViolation</Name>
   </Step>
</FaultRule>




        <FaultRule name="ThreatProtectionError">            
  <Condition>(jsonattack.failed = "true") or (regularexpressionprotection.failed ="true") </Condition>
    <Step>
		<Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
	</Step>	
    <Step>                
         <Name>Fault.400BadRequestPayload</Name>            
    </Step>
</FaultRule>




    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
        	   <Step>
    	<Condition>request.verb != "OPTIONS"</Condition>
        <Name>OAuthV2.verifyAccessToken</Name>       
    </Step>




                 <Step>
    	<Condition>request.verb != "OPTIONS"</Condition>
        <Name>Quota.imposeQuota</Name>
    </Step>
                 <Step>
    	<Condition>request.verb != "OPTIONS"</Condition>
        <Name>Spike.ImposeSpikeArrest</Name>
    </Step>
                 <Step>
    	<Condition>((request.verb = "POST") or (request.verb = "PUT")) and (request.header.Content-Type = "application/json")</Condition>
        <Name>RegularExpressionProtection.DoSCheck</Name>
    </Step>
            <Step>
            	<Condition>(request.verb != "OPTIONS") and (request.header.Content-Type = "application/json")</Condition>
            	<Name>JSONThreatProtection</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <Flows>
    	<!--Options Pre-flight Resource-->
            	  <Flow name="invalidResource">
            <Description/>
            <Request>
                <Step>
          		<Name>common.Assign.SetCORSHeadersForOptionAPI</Name>
     			 </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/**")</Condition>
        </Flow>
        <!--Invalid Resource-->
        <Flow name="invalidResource">
            <Description/>
            <Request>
                <Step>
                    <Name>Fault</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/**")</Condition>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request />
        <Response>
        </Response>
    </PostFlow>
    <PostClientFlow>
        <Response>
            
        </Response>
    </PostClientFlow>
    <HTTPProxyConnection>
        <BasePath>/sample-proxy/v1</BasePath>
        <Properties/>
        <VirtualHost>default</VirtualHost>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="NoRoute">
        <Condition>(request.verb == "OPTIONS")</Condition>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>